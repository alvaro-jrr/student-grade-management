// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Nombre de Rol
enum RoleName {
    ADMIN
    COORDINATOR
    TEACHER
    REPRESENTATIVE
    STUDENT
}

// Persona
model Person {
    identityCard   String          @id
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    firstname      String          @db.VarChar(25)
    lastname       String          @db.VarChar(25)
    representative Representative?
    coordinator    Coordinator?
    teacher        Teacher?
    student        Student?
    role           RoleName
}

// Representative
model Representative {
    identityCard String                    @id
    email        String                    @unique
    person       Person                    @relation(fields: [identityCard], references: [identityCard], onDelete: Cascade, onUpdate: Cascade)
    phoneNumber  String
    students     RepresentativeByStudent[]
}

// Coordinador
model Coordinator {
    identityCard   String    @id
    person         Person    @relation(fields: [identityCard], references: [identityCard], onDelete: Cascade, onUpdate: Cascade)
    entryDate      DateTime  @default(now())
    retirementDate DateTime?
    isActive       Boolean   @default(true)
}

// Docente
model Teacher {
    identityCard  String         @id
    person        Person         @relation(fields: [identityCard], references: [identityCard], onDelete: Cascade, onUpdate: Cascade)
    specialty     String
    academicLoads AcademicLoad[]
}

// Estudiante
model Student {
    identityCard    String                    @id
    person          Person                    @relation(fields: [identityCard], references: [identityCard], onDelete: Cascade, onUpdate: Cascade)
    birthDate       DateTime
    grades          Grade[]
    representatives RepresentativeByStudent[]
    enrollments     Enrollment[]
    sections        StudentBySection[]
}

// Usuario
model User {
    id           Int      @id @default(autoincrement())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    identityCard String   @unique
    username     String   @unique
    password     String
    role         RoleName
}

// Representante
model RepresentativeByStudent {
    id                         Int            @id @default(autoincrement())
    createdAt                  DateTime       @default(now())
    representative             Representative @relation(fields: [representativeIdentityCard], references: [identityCard], onDelete: Cascade)
    representativeIdentityCard String
    student                    Student        @relation(fields: [studentIdentityCard], references: [identityCard])
    studentIdentityCard        String
}

// Periodo Academico
model AcademicPeriod {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    startDate     DateTime
    endDate       DateTime
    academicLoads AcademicLoad[]
    sections      Section[]
    enrollments   Enrollment[]
}

// Año de Estudio
model StudyYear {
    id          Int                 @id @default(autoincrement())
    year        Int                 @db.UnsignedInt
    enrollments Enrollment[]
    courses     CourseByStudyYear[]
    sections    Section[]
}

// Asignatura por Año
model CourseByStudyYear {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    studyYear     StudyYear      @relation(fields: [studyYearId], references: [id])
    studyYearId   Int
    course        Course         @relation(fields: [courseId], references: [id])
    courseId      Int
    academicLoads AcademicLoad[]

    @@unique([studyYearId, courseId])
}

// Asignatura
model Course {
    id         Int                 @id @default(autoincrement())
    createdAt  DateTime            @default(now())
    updatedAt  DateTime            @updatedAt
    title      String              @unique
    studyYears CourseByStudyYear[]
}

// Lapso
model Lapse {
    id          Int          @id @default(autoincrement())
    description Int          @db.UnsignedInt
    assignments Assignment[]
}

// Carga Academica
model AcademicLoad {
    id                  Int               @id @default(autoincrement())
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    academicPeriod      AcademicPeriod    @relation(fields: [academicPeriodId], references: [id])
    academicPeriodId    Int
    teacher             Teacher           @relation(fields: [teacherIdentityCard], references: [identityCard])
    teacherIdentityCard String
    courseByStudyYear   CourseByStudyYear @relation(fields: [courseByStudyYearId], references: [id])
    courseByStudyYearId Int
    assignments         Assignment[]

    @@unique([academicPeriodId, teacherIdentityCard, courseByStudyYearId])
}

// Evaluacion
model Assignment {
    id             Int          @id @default(autoincrement())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    academicLoad   AcademicLoad @relation(fields: [academicLoadId], references: [id])
    academicLoadId Int
    lapse          Lapse        @relation(fields: [lapseId], references: [id])
    lapseId        Int
    description    String
    weight         Int          @db.UnsignedInt
    grades         Grade[]
}

// Calificacion
model Grade {
    id                  Int        @id @default(autoincrement())
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    student             Student    @relation(fields: [studentIdentityCard], references: [identityCard])
    studentIdentityCard String
    assignment          Assignment @relation(fields: [assignmentId], references: [id])
    assignmentId        Int
    score               Float
    note                String

    @@unique([studentIdentityCard, assignmentId])
}

// Inscripcion
model Enrollment {
    id                  Int            @id @default(autoincrement())
    createdAt           DateTime       @default(now())
    student             Student        @relation(fields: [studentIdentityCard], references: [identityCard])
    studentIdentityCard String
    studyYear           StudyYear      @relation(fields: [studyYearId], references: [id])
    studyYearId         Int
    academicPeriod      AcademicPeriod @relation(fields: [academicPeriodId], references: [id])
    academicPeriodId    Int

    @@unique([studentIdentityCard, academicPeriodId, studyYearId])
}

// Seccion
model Section {
    id               Int                @id @default(autoincrement())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    studyYear        StudyYear          @relation(fields: [studyYearId], references: [id])
    studyYearId      Int
    academicPeriod   AcademicPeriod     @relation(fields: [academicPeriodId], references: [id])
    academicPeriodId Int
    description      String             @db.Char(1)
    students         StudentBySection[]

    @@unique([studyYearId, academicPeriodId, description])
}

// Estudiante por Seccion
model StudentBySection {
    id                  Int      @id @default(autoincrement())
    createdAt           DateTime @default(now())
    section             Section  @relation(fields: [sectionId], references: [id])
    sectionId           Int
    student             Student  @relation(fields: [studentIdentityCard], references: [identityCard])
    studentIdentityCard String

    @@unique([studentIdentityCard, sectionId])
}
